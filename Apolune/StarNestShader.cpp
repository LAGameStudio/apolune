#include "StarNestShader.h"

#include "Art2d.h"

StarNestShader starNestShader;
StarNest2Shader starNest2Shader;
StarNestSimpleShader starNestSimpleShader;
StarNestSimple2Shader starNestSimple2Shader;

void ShadedStarNest( float time, float pos_x, float pos_y, float res_x, float res_y, FBOColor *out ) {
 starNestShader.time=time;
 starNestShader.position.x=pos_x;
 starNestShader.position.y=pos_y;
 starNestShader.resolution.x=res_x;
 starNestShader.resolution.y=res_y;
 out->Bind();
 out->QuadYInverted(&starNestShader);
 out->Unbind();
}

void ShadedStarNest2( float time, float pos_x, float pos_y, float res_x, float res_y, FBOColor *out ) {
 starNest2Shader.time=time;
 starNest2Shader.position.x=pos_x;
 starNest2Shader.position.y=pos_y;
 starNest2Shader.resolution.x=res_x;
 starNest2Shader.resolution.y=res_y;
 out->Bind();
 out->QuadYInverted(&starNest2Shader);
 out->Unbind();
}

void ShadedStarNestSimple( float time, float pos_x, float pos_y, float res_x, float res_y, FBOColor *out ) {
 starNestSimpleShader.time=time;
 starNestSimpleShader.position.x=pos_x;
 starNestSimpleShader.position.y=pos_y;
 starNestSimpleShader.resolution.x=res_x;
 starNestSimpleShader.resolution.y=res_y;
 out->Bind();
 out->QuadYInverted(&starNestSimpleShader);
 out->Unbind();
}

void ShadedStarNestSimple2( float time, float pos_x, float pos_y, float res_x, float res_y, FBOColor *out ) {
 out->Bind();
 starNestSimple2Shader.time=time;
 starNestSimple2Shader.position.x=pos_x;
 starNestSimple2Shader.position.y=pos_y;
 starNestSimple2Shader.resolution.x=res_x;
 starNestSimple2Shader.resolution.y=res_y;
 out->QuadYInverted(&starNestSimple2Shader);
 out->Unbind();
}


//////////////////////////////////////////

void StarNestShader::Init() {
  OUTPUT("StarNestShader::Loading\n");
  string vert=
    string("#version 330\n")
   +string("in vec2 position;\n")
   +string("in vec2 texcoord;\n")
   +string("uniform mat4 trans;\n")
   +string("out vec2 Texcoord;\n")
   +string("\n")
   +string("void main() {\n")
   +string(" Texcoord = texcoord;\n")
   +string(" gl_Position = trans * vec4(position, 0.0, 1.0);\n")
   +string("}")
  ;
  string frag=
    string("#version 330 core\n")
   +string("in vec2 Texcoord;\n")
   +string("out vec4 outColor;\n")
   +string("uniform float time;\n")
   +string("uniform vec2 mouse;\n")
   +string("uniform vec2 resolution;\n")
   +string("//const float  iterations= 15;\n")
   +string("const float  formuparam= 0.53;\n")
   +string("//const float  volsteps= 18;\n")
   +string("const float  stepsize= 0.120;\n")
   +string("const float  zoom=   0.8;//0.990;\n")
   +string("const float  tile=   0.85;\n")
   +string("const float  speed=  0.0001;\n")
   +string("const float  brightness= 0.0015;\n")
   +string("const float  darkmatter= 0.400;\n")
   +string("const float  distfading= 0.760;\n")
   +string("const float  saturation= 0.800;\n")
   +string("void main(void) {\n")
   +string(" //get coords and direction\n")
   +string(" vec2 uv=Texcoord.xy-0.5;\n")
   +string(" uv.y*=resolution.y/resolution.x;\n")
   +string(" vec3 dir=vec3(uv*zoom,1.0);\n")
   +string(" float a2=time*speed+.25;\n")
   +string(" float a1=0.0;\n")
   +string(" mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n")
   +string(" mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n")
   +string(" dir.xz*=rot1;\n")
   +string(" dir.xy*=rot2;\n")
   +string(" //from.x-=time;\n")
   +string(" //mouse movement\n")
   +string(" vec3 from=vec3(0.0,0.0,0.0)  + vec3(0.2,0.87,0.0);\n")
   +string(" //from+=vec3(time*2.,time,-2.);\n")
   +string(" from.x-=mod(mouse.x/resolution.x,1.0);\n")
   +string(" from.y-=mod(mouse.y/resolution.y,1.0);\n")
   +string(" from.xz*=rot1;\n")
   +string(" from.xy*=rot2;\n")
   +string(" //volumetric rendering\n")
   +string(" float _s=0.1,fade=1.0;\n")
   +string(" vec3 v=vec3(0.0);\n")
   +string(" vec3 _p=vec3(0.0);\n")
   +string(" float pa=0.0;\n")
   +string(" float _a=0.0;\n")
   +string(" float dm=0.0;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("    _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*0.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time/10.0))*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time))*fade; fade*=distfading; _s+=stepsize;\n")
   +string(" v=mix(vec3(length(v)),v,saturation); //color adjust\n")
   +string(" outColor =  vec4(v*0.01,1.0); \n")
   +string("}\n")
  ;
  Strings binds; binds.Add("outColor");
  loadShaders(&binds,vert.c_str(),frag.c_str());
  InitUniforms();
 } 



 
 void StarNest2Shader::Init() {
  OUTPUT("StarNest2Shader::Loading\n");
 // Simple passthrough vertex shader
  string vert=
    string("#version 330\n")
   +string("in vec2 position;\n")
   +string("in vec2 texcoord;\n")
   +string("uniform mat4 trans;\n")
   +string("out vec2 Texcoord;\n")
   +string("\n")
   +string("void main() {\n")
   +string(" Texcoord = texcoord;\n")
   +string(" gl_Position = trans * vec4(position, 0.0, 1.0);\n")
   +string("}")
  ;
  string frag=
    string("#version 330 core\n")
   +string("in vec2 Texcoord;\n")
   +string("out vec4 outColor;\n")
   +string("uniform float time;\n")
   +string("uniform vec2 mouse;\n")
   +string("uniform vec2 resolution;\n")
   +string("const float  formuparam= 0.530;\n")
   +string("const float  stepsize= 0.120;\n")
   +string("const float  zoom=   1.0;//0.990;\n")
   +string("const float  tile=   0.850;\n")
   +string("const float  speed=  0.0001;\n")
   +string("const float  brightness= 0.0015;\n")
   +string("const float  darkmatter= 0.400;\n")
   +string("const float  distfading= 0.760;\n")
   +string("const float  saturation= 0.800;\n")
   +string("void main(void) {\n")
   +string(" //get coords and direction\n")
   +string(" vec2 uv=Texcoord.xy-0.5;\n")
   +string(" uv.y*=resolution.y/resolution.x;\n")
   +string(" vec3 dir=vec3(uv*zoom,1.0);\n")
   +string(" float a2=time*speed+.25;\n")
   +string(" float a1=0.0;\n")
   +string(" mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n")
   +string(" mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n")
   +string(" dir.xz*=rot1;\n")
   +string(" dir.xy*=rot2;\n")
   +string(" //mouse movement\n")
   +string(" vec3 from=vec3(0.0,0.0,0.0)  + vec3(0.2,0.7,0.0);\n")
   +string(" //from+=vec3(time*2.,time,-2.);\n")
   +string(" from.x-=mouse.x/resolution.x;\n")
   +string(" from.y-=mouse.y/resolution.y;\n")
   +string(" from.xz*=rot1;\n")
   +string(" from.xy*=rot2;\n")
   +string(" //volumetric rendering\n")
   +string(" float _s=0.1,fade=1.0;\n")
   +string(" vec3 v=vec3(0.0);\n")
   +string(" vec3 _p=vec3(0.0);\n")
   +string(" float pa=0.0;\n")
   +string(" float _a=0.0;\n")
   +string(" float dm=0.0;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("    _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*0.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time/10.0))*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time))*fade; fade*=distfading; _s+=stepsize;\n")
   +string(" v=mix(vec3(length(v)),v,saturation); //color adjust\n")
   +string(" outColor =  vec4(v*0.01,1.0); \n")
   +string("}\n")
  ;
  loadShaders(vert.c_str(),frag.c_str());
  InitUniforms();
 } 


 
 void StarNestSimpleShader::Init() {
  OUTPUT("StarNestSimpleShader::Loading\n");
  string vert=
    string("#version 330\n")
   +string("in vec2 position;\n")
   +string("in vec2 texcoord;\n")
   +string("uniform mat4 trans;\n")
   +string("out vec2 Texcoord;\n")
   +string("\n")
   +string("void main() {\n")
   +string(" Texcoord = texcoord;\n")
   +string(" gl_Position = trans * vec4(position, 0.0, 1.0);\n")
   +string("}")
  ;
  string frag=
    string("#version 330 core\n")
   +string("in vec2 Texcoord;\n")
   +string("out vec4 outColor;\n")
   +string("uniform float time;\n")
   +string("uniform vec2 mouse;\n")
   +string("uniform vec2 resolution;\n")
   +string("const float  formuparam= 0.530;\n")
   +string("const float  stepsize= 0.120;\n")
   +string("const float  zoom=   1.0;//0.990;\n")
   +string("const float  tile=   0.850;\n")
   +string("const float  speed=  0.0001;\n")
   +string("const float  brightness= 0.0015;\n")
   +string("const float  darkmatter= 0.400;\n")
   +string("const float  distfading= 0.760;\n")
   +string("const float  saturation= 0.800;\n")
   +string("void main(void) {\n")
   +string(" //get coords and direction\n")
   +string(" vec2 uv=Texcoord.xy-0.5;\n")
   +string(" uv.y*=resolution.y/resolution.x;\n")
   +string(" vec3 dir=vec3(uv*zoom,1.0);\n")
   +string(" float a2=time*speed+.25;\n")
   +string(" float a1=0.0;\n")
   +string(" mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n")
   +string(" mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n")
   +string(" dir.xz*=rot1;\n")
   +string(" dir.xy*=rot2;\n")
   +string(" //from.x-=time;\n")
   +string(" //mouse movement\n")
   +string(" //mouse movement\n")
   +string(" vec3 from=vec3(0.0,0.0,0.0)  + vec3(0.421,0.171,0.0);\n")
   +string(" //from+=vec3(time*2.,time,-2.);\n")
   +string(" from.x-=mouse.x/resolution.x;\n")
   +string(" from.y-=mouse.y/resolution.y;\n")
   +string(" from.xz*=rot1;\n")
   +string(" from.xy*=rot2;\n")
   +string(" //volumetric rendering\n")
   +string(" float _s=0.1,fade=1.0;\n")
   +string(" vec3 v=vec3(0.0);\n")
   +string(" vec3 _p=vec3(0.0);\n")
   +string(" float pa=0.0;\n")
   +string(" float _a=0.0;\n")
   +string(" float dm=0.0;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*0.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time/10.0))*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time))*fade; fade*=distfading; _s+=stepsize;\n")
   +string(" v=mix(vec3(length(v)),v,saturation); //color adjust\n")
   +string(" outColor =  vec4(v*0.01,1.0); \n")
   +string("}\n")
  ;
  Strings binds; binds.Add("outColor");
  loadShaders(&binds,vert.c_str(),frag.c_str());
  InitUniforms();
 } 

 
 void StarNestSimple2Shader::Init() {
  OUTPUT("StarNestSimple2Shader::Loading\n");
  string vert=
    string("#version 330\n")
   +string("in vec2 position;\n")
   +string("in vec2 texcoord;\n")
   +string("uniform mat4 trans;\n")
   +string("out vec2 Texcoord;\n")
   +string("\n")
   +string("void main() {\n")
   +string(" Texcoord = texcoord;\n")
   +string(" gl_Position = trans * vec4(position, 0.0, 1.0);\n")
   +string("}")
  ;
  string frag=
    string("#version 330 core\n")
   +string("in vec2 Texcoord;\n")
   +string("out vec4 outColor;\n")
   +string("uniform float time;\n")
   +string("uniform vec2 mouse;\n")
   +string("uniform vec2 resolution;\n")
   +string("const float  formuparam= 0.530;\n")
   +string("const float  stepsize= 0.120;\n")
   +string("const float  zoom=   1.0;//0.990;\n")
   +string("const float  tile=   0.850;\n")
   +string("const float  speed=  0.0001;\n")
   +string("const float  brightness= 0.0015;\n")
   +string("const float  darkmatter= 0.400;\n")
   +string("const float  distfading= 0.760;\n")
   +string("const float  saturation= 0.800;\n")
   +string("void main(void) {\n")
   +string(" //get coords and direction\n")
   +string(" vec2 uv=Texcoord.xy-0.5;\n")
   +string(" uv.y*=resolution.y/resolution.x;\n")
   +string(" vec3 dir=vec3(uv*zoom,1.0);\n")
   +string(" float a2=time*speed+.25;\n")
   +string(" float a1=0.0;\n")
   +string(" mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n")
   +string(" mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n")
   +string(" dir.xz*=rot1;\n")
   +string(" dir.xy*=rot2;\n")   
   +string(" //mouse movement\n")
   +string(" vec3 from=vec3(0.0,0.0,0.0)  + vec3(0.2123,0.3123,0.0);\n")
   +string(" //from+=vec3(time*2.,time,-2.);\n")
   +string(" from.x-=mouse.x/resolution.x;\n")
   +string(" from.y-=mouse.y/resolution.y;\n")
   +string(" from.xz*=rot1;\n")
   +string(" from.xy*=rot2;\n")
   +string(" //volumetric rendering\n")
   +string(" float _s=0.1,fade=1.0;\n")
   +string(" vec3 v=vec3(0.0);\n")
   +string(" vec3 _p=vec3(0.0);\n")
   +string(" float pa=0.0;\n")
   +string(" float _a=0.0;\n")
   +string(" float dm=0.0;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*0.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time/10.0))*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time))*fade; fade*=distfading; _s+=stepsize;\n")
   +string(" v=mix(vec3(length(v)),v,saturation); //color adjust\n")
   +string(" outColor =  vec4(v*0.01,1.0); \n")
   +string("}\n")
  ;
  Strings binds; binds.Add("outColor");
  loadShaders(&binds,vert.c_str(),frag.c_str());
  InitUniforms();
 } 